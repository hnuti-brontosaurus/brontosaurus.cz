$buttons-secondary-breakpoint-rightBottomBubbleToCenteredButton: 39em;
$buttons-secondary-breakpoint-rightBottomBubble-until: "max-width: " + $buttons-secondary-breakpoint-rightBottomBubbleToCenteredButton;
$buttons-secondary-breakpoint-centeredButton-from: "min-width: " + ($buttons-secondary-breakpoint-rightBottomBubbleToCenteredButton + 0.001);

@mixin buttons-primary-hoverEffect () {
	background-color: darken($colors-emphasizing, 10);
	color: $colors-default-background;
}

// @todo: move to .action
.button {

	// shared styles for all button types
	display: inline-block;
	border-radius: 2em;
	text-decoration: none;
	transition:
		background-color 200ms ease-in-out,
		color 200ms ease-in-out;


	&--primary,
	&--secondary {
		padding-top: calc(#{vr-unit(0.5)} + 0.25em);
		padding-bottom: vr-unit(0.5);
	}


	// used for call to action buttons/links - these should lead you to a concrete destination
	// @todo: rename to action

	&--primary {
		background-color: $colors-emphasizing;
		border: none; // ?
		color: $colors-default-background !important; // overwrite global link style
		padding-left: vr-unit(1);
		padding-right: calc(#{vr-unit(1)} + 5px);
		position: relative;
		text-transform: uppercase;
		//box-shadow: 4px 2px 8px 0 $colors-default-background; // or 0 0 10px 3px

		@media (min-width: 23.001em) {
			padding-left: vr-unit(2);
			padding-right: calc(#{vr-unit(2)} + 5px);
		}

		&:hover {
			@include buttons-primary-hoverEffect();
		}

		@media (min-width: 20.001em) {
			&::after {
				content: "";
				display: inline-block;
				position: absolute;
				right: 25px;
				top: calc(50% - 9px);
				width: 10px;
				height: 17px;
				background-image: url("../images/icon-arrow.svg");
				background-repeat: no-repeat;
				background-size: auto 100%;
			}
		}
	}


	// option buttons/links - these should give you an option where you can go; used typically for in-block buttons/links
	// @todo rename to option

	&--secondary-wrapper { // wrapper is mandatory for this button type on its parent
		display: block;
		overflow: hidden;
		position: relative;
	}
	&--secondary {
		display: block;
		position: absolute;
		bottom: vr-unit(1);
		max-width: 8em;
		z-index: 0;
		text-decoration: none;
		text-transform: uppercase;
		transition: color 200ms ease-in-out;
		hyphens: auto;

		@media ($buttons-secondary-breakpoint-rightBottomBubble-until) {
			text-align: right;
			right: vr-unit(1);
		}
		@media ($buttons-secondary-breakpoint-centeredButton-from) {
			max-width: 20em;
			left: 50%; transform: translateX(-50%); // center absolutely positioned element
			white-space: nowrap; // avoid line breaks (when `left: 50%` hits right border of an element, it causes line break)
			padding: vr-unit(0.5) vr-unit(1) calc(#{vr-unit(0.5)} - 0.3em);
			border-radius: 2em;
		}

		&::before {
			background-image: url("../images/icon-smallPaw.svg");
			background-position: left top;
			background-size: 100% auto;
			background-repeat: no-repeat;
			content: "";
			display: inline-block;
			height: 22px;
			margin-bottom: -0.1em;
			margin-right: 10px;
			width: 20px;
		}
		&::after {
			content: "";
			background-color: transparentize($colors-default-background, 0.2);
			width: 13em;
			height: 13em;
			position: absolute;
			border-radius: 50%;
			top: -3em;
			z-index: -1;
			transition: background-color 200ms ease-in-out;

			@media ($buttons-secondary-breakpoint-rightBottomBubble-until) {
				right: -4em;
			}
			@media ($buttons-secondary-breakpoint-centeredButton-from) {
				background-color: transparentize($colors-default-background, 0.1);
				width: 100%;
				height: 100%;
				top: 0;
				left: 0;
				border-radius: 2em;
			}
		}
	}
	&--secondary-wrapper:hover {
		.button--secondary {
			color: $colors-default-background;

			&::after {
				background-color: $colors-emphasizing;
			}
		}
	}


	// used for customization buttons like event filters

	&--customization {
		padding: 0.3em vr-unit(1) 0.15em;
		border: none;
		background-color: $colors-tinge;
		color: $colors-text;
		cursor: pointer;

		&:hover,
		&:active {
			background-color: darken($colors-tinge, 10);
			color: initial !important; // overwrite `.content a` style
		}

		&:active {
			transform: translate(1px, 1px);
		}
	}
}
